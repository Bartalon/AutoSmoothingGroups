global proc dp_autoSG() {
	string $sel[] = `ls -l -sl`;
	string $allBorders[];
	string $flippedShells[];
	if ( `size $sel` == 1 && ! dp_isModel($sel[0]) ) { dp_warn("Objects must be selected."); return; }

	int $lotsOfShells;
	int $shellThreshold = 750;
	for ( $obj in $sel ) {
		if ( dp_countUVShells($obj) > $shellThreshold ) { 
			$lotsOfShells = 1; 
			break;
		}
	}

	if ( $lotsOfShells ) {
		string $option = `confirmDialog 
			-t "High UV Shell Count" 
			-m ( "One or more of your models has a very high amount of UV shells (over " + $shellThreshold + ").\nThese may take a couple minutes each to process." )
			-b "Skip High-shell Objects"
			-b "Process All Models"
			-b "Abort"`;

		if ( $option == "Abort" ) { return; }
		if ( $option == "Process All Models" ) { $shellThreshold = 100000; }
	}

	for ( $obj in $sel ) {
		if ( dp_isModel($obj) && dp_countUVShells($obj) < $shellThreshold ) {
			select $obj;
			SoftPolyEdgeElements 1;
			ConvertSelectionToFaces;
			string $faces[] = `ls -l -fl -sl`;
			int $len = `size $faces`;
			dp_makeProgressBar("Defining Smoothing Groups... (Hold ESC to Stop)", $len);

			int $shellCount;
			while ( `size $faces` > 0 ) {
				if ( dp_isProgressBarCancelled() ) { 
					dp_reinstateMainProgressBar();
					return; 
				}

				int $count = `size $faces`;
				select $faces[0];
				polySelectBorderShell 0;
				string $pass[] = `ls -l -fl -sl`;
				$faces = stringArrayRemove($pass, $faces);
				dp_toEdgePerimeter();
				string $edges[] = `ls -l -sl`;
				$allBorders = stringArrayCatenate($allBorders, $edges);
				++$shellCount;

				dp_stepProgressBar(`size $pass`);
			}

			dp_reinstateMainProgressBar();

			if ( dp_getVersion() > 2017 ) {
				print ("\nThe model " + $obj + " has " + dp_countUVShells($obj) + " UV shells.\n");
			}
			else {
				print ("\nThe model " + $obj + " has " + $shellCount + " UV shells.\n");
			}
		}
	}

	dp_makeProgressBar("Finalizing edges...", 100);
	dp_stepProgressBar(76);

	select $allBorders;
	SoftPolyEdgeElements 0;

	dp_stepProgressBar(12);

	if ( dp_getVersion() < 2017 ) {
		hilite -r $sel;
		hilite -tgl $sel;
	}
	dp_stepProgressBar(12);
	dp_reinstateMainProgressBar();
}


/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////  Support Procs

global proc int dp_getVersion() {
	string $info = `about -v`;
	string $buffer[];
	tokenize $info " " $buffer;

	string $yr = $buffer[0];

	if ( $yr == "2017" ) {
		string $installedVersion = `about -iv`;
		if ( `match "Update 5" $installedVersion` == "Update 5" ) {
			$yr = "20175";
		}
	}

	return ((int)$yr);
}

global proc int dp_isComponent(string $obj) {
	if ( `nodeType -api $obj` == "kMesh" )
		return 1;
	return 0;
}

global proc int dp_isModel(string $obj) {
	int $mode;

	if ( $obj == "") { return 0; }

	if ( `objectType -isType "mesh" $obj` ) { $mode = 1; }

	if ( `objectType -isType "transform" $obj` && ! dp_isComponent($obj) ) { 
		string $meshes[] = `listRelatives -c -f -type "mesh" $obj`;
		if ( $meshes[0] == "" ) { $mode = 0; }
		else { $mode = 1; }
	}

	if ( dp_isComponent($obj) ) { $mode = 0; }
	return $mode;

}

global proc dp_toEdgePerimeter() {
	if ( dp_getVersion() >= 2015 ) { eval "ConvertSelectionToEdgePerimeter;"; }
	else {
		string $allComponents[] = `ls -l -sl`;
		ConvertSelectionToEdges;
		string $allEdges[] = `ls -l -fl -sl`;
		select $allComponents;
		ConvertSelectionToContainedEdges;
		string $interior[] = `ls -l -fl -sl`;
		string $remaining[] = stringArrayRemove($interior, $allEdges);
		select $remaining;
	}
}

global proc int dp_countUVShells(string $obj) {
	int $shellCount[];
	if ( dp_getVersion() > 2017 ) { $shellCount = eval( "polyEvaluate -us " + $obj ); }
	else {

	}
	return $shellCount[0];
}

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////  Progress Bar Procs

global proc dp_makeProgressBar(string $title, int $maxValue) {
	global string $gMainProgressBar;
	global string $gMainWindow;
	global string $dp_progress_toolbox = "dp_toolProgressWindow";
	global string $dp_progress_bar = "dp_toolProgressBar";
	string $form = "dp_toolProgressForm";
	int $le = `window -q -le $gMainWindow`;
	int $te = `window -q -te $gMainWindow`;

	if ( `window -ex $dp_progress_toolbox` ) { deleteUI $dp_progress_toolbox; }

	window -title $title 
		-toolbox 1 
		-minimizeButton 1 
		-maximizeButton 0 
		-menuBar 0 
		-width 400 
		-height 50 
		$dp_progress_toolbox;

	formLayout -p $dp_progress_toolbox $form;
		progressBar -maxValue $maxValue -width 400 -height 50 -imp on -bp -isInterruptable 1 -p $form $dp_progress_bar;
	showWindow $dp_progress_toolbox;

	window -e -te ($te + 500) -le ($le + 800) $dp_progress_toolbox;
}

global proc dp_stepProgressBar(float $step) {
	global string $dp_progress_bar;
	progressBar -e -step $step $dp_progress_bar;
}


global proc int dp_isProgressBarCancelled() {
	global string $dp_progress_bar;
	if ( `progressBar -q -isCancelled $dp_progress_bar` ) { 
		progressBar -e -endProgress $dp_progress_bar; return 1; 
	}
	return 0;
}

global proc dp_reinstateMainProgressBar() {
	global string $gMainProgressBar;
	global string $dp_progress_bar;
	global string $dp_progress_toolbox;
	if ( `progressBar -q -ex $dp_progress_bar` ) {
		progressBar -e -imp 1 $gMainProgressBar;
		deleteUI $dp_progress_bar;
		deleteUI $dp_progress_toolbox;
	}
}


/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

dp_autoSG();